prob1.cpp*************************************
#pragma warning (disable: 4996)
#include <stdio.h>
#include "stack.h"
#define MAX 100
#define PATH 0
#define WALL 1
#define VISITED 2
#define BACKTRACKED 3

/***********모든 케이스 통과***********/

bool movable(Position pos, int dir, int caseSize);

int arr[60][60];

int main() {
	//깊이우선 탐색(DFS)
	//2자원 배열으로 방문 방법, 이중for문 사용
	//
	//이미지 픽셀 방문 시
	//(방문한 적 없는 경우)
	//스택에 픽셀 위치 push & 이미지 픽셀 방문 표시 & count++
	//8방향에 대해 갈 위치 없으면 스택에서 pop해서 왔던 위치로 돌아감
	//돌아온 위치가 제일 처음 DFS 시작한 위치인 경우 count 출력 & 초기화

	int caseNum; int count = 0;
	FILE* fp = fopen("input.txt", "r");
	if (fp == NULL) printf("fp failed");

	//케이스 갯수
	fscanf(fp, "%d", &caseNum);
	for (int i = 0; i < caseNum; i++) {//caseNum번 시행
		int caseSize = 0, count = 0;
		//픽셀의 크기
		fscanf(fp, "%d", &caseSize);//caseSize^caseSize 배열을 사용하게 됨
		//printf("caseSize: %d\n", caseSize);
		//배열에 원소들 저장
		for (int j = 0; j < caseSize; j++) {
			for (int k = 0; k < caseSize; k++) {
				fscanf(fp, "%d", &arr[j][k]);
				//printf("%d ", arr[j][k]);
			}
			//printf("\n");
		}
		//DFS 탐색
		Stack s = create();
		Position cur;//현재 위치를 나타낼 Postition 구조체
		cur.x = 0;
		cur.y = 0;

		//2차원 배열 하나하나 돌면서 검사, 이미 돌았던 원소면 다시 안돔
		for (int j = 0; j < caseSize; j++) {
			for (int k = 0; k < caseSize; k++) {
				//배열의 각 픽셀에 대해 탐색했었는지 확인 후 탐색 한적 없다면 DFS 시작
				//탐색할 수 있는 픽셀이 아닌 경우(방문했었거나, 벽, 외부인 경우) => 그다음 픽셀로 넘어감
				if (arr[j][k] != 1) continue;
				else {
					cur.x = j; cur.y = k;
					count = 1;
				}
				//탐색할 수 있는 경우=> 해당 노드로 이동 후, cur변경
				//printf("arr[%d][%d] == 1\n", j, k);
				while (1) {
					arr[cur.x][cur.y] = VISITED;
					bool forwarded = false;
					for (int dir = 0; dir < 8; dir++) {
						//printf("dir: %d\n", dir);
						if (movable(cur, dir, caseSize)) {
							//printf("이동할 수 있는 경로 존재, 현재 위치 스택 삽입: %d %d\n", cur.x, cur.y);
							push(s, cur);
							cur = move_to(cur, dir);
							forwarded = true;
							count++;
							break;
						}
					}
					if (!forwarded) {
						arr[cur.x][cur.y] = BACKTRACKED;
						if (is_empty(s)) { printf("%d ", count); break; }
						cur = pop(s);
						//printf("경로 더 이상 없으므로 이전 위치로 되돌아감: (%d %d)\n", cur.x, cur.y);
					}
				}
			}
		}
		printf("\n");
	}
	return 0;
}

bool movable(Position cur, int dir, int caseSize) {
	//dir 0이면 북, 1이면 동북 , 2면 동, 3이면 동남, 4면 남, 5면 남서, 6이면 서, 7이면 북서
	//북
	if (dir == 0) {
		if (arr[cur.x - 1][cur.y] == 1)return true;
		else return false;
	}
	//동북
	else if (dir == 1) {
		if(arr[cur.x-1][cur.y+1] == 1)return true;
		else return false;
	}
	//동
	else if (dir == 2) {
		if(arr[cur.x][cur.y+1] == 1)return true;
		else return false;

	}
	// 동남
	else if (dir == 3) {
		if(arr[cur.x+1][cur.y+1] == 1)return true;
		else return false;
	}
	//남
	else if (dir == 4) {
		if(arr[cur.x+1][cur.y] == 1)return true;
		else return false;
	}
	//남서
	else if (dir == 5) {
		if(arr[cur.x+1][cur.y-1] == 1)return true;
		else return false;
	}
	//서
	else if (dir == 6) {
		if(arr[cur.x][cur.y-1] == 1)return true;
		else return false;
	}
	//북서
	else if (dir == 7) {
		if(arr[cur.x-1][cur.y-1] == 1)return true;
		else return false;
	}
}

stack.cpp************************************
#include "stack.h"
#include <stdlib.h>
#include <stdio.h>
#define INIT_CAPACITY 3000

int offset[8][2] = { {-1,0},{-1, 1}, {0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1}};

//현재 위치(cur)를 받아서 이동한 위치를 반환
Position move_to(Position pos, int dir) {
	Position next;
	next.x = pos.x + offset[dir][0];
	next.y = pos.y + offset[dir][1];
	//printf("위치 이동: (%d, %d)\n", next.x, next.y);
	return next;
}

Stack create() {
	Stack s = (Stack)malloc(sizeof(struct stack_type));//stack_type을 가리키는 구조체 포인터 선언
	if (s == NULL) printf("error founded!");
	s->contents = (Position*)malloc(INIT_CAPACITY * sizeof(Position));//stack_type의 Item형 배열 포인터에 스택들어갈 공간 할당
	if (s->contents == NULL) {
		free(s);
	}
	s->top = -1;//초기값
	s->size = INIT_CAPACITY;//스택의 (최대)크기
	return s;
}

void push(Stack s, Position cur) {
	s->top++;
	s->contents[s->top] = cur;
}

Position pop(Stack s) {
	return s->contents[s->top--];
}
bool is_empty(Stack s) {
	if (s->top > -1) return false;
	return true;
}

stack.h*****************************




prob2.cpp**************************************
#pragma warning (disable: 4996)
#include <stdio.h>
#include "stack.h"
#define MAX 100
#define PATH 0
#define WALL 1
#define VISITED 2
#define BACKTRACKED 3

/***********모든 케이스 통과***********/

bool movable(Position pos, int dir, int caseSize);

int arr[60][60];

int main() {
	//너비우선 탐색(BFS)
	//2자원 배열으로 방문 방법, 이중for문 사용
	//
	//이미지 픽셀 방문 시
	//(방문한 적 없는 경우)
	//큐에 노드삽입 && 현재 픽셀 방문 표시 && count++
	//8방향에 대해 갈 위치 없으면 count 출력(해당 컴포넌트 BFS 탐색 완료)
	//그 다음 배열 원소에 대해 BFS 탐색


	int caseNum; int count = 0;
	FILE* fp = fopen("input.txt", "r");
	if (fp == NULL) printf("fp failed");

	//케이스 갯수
	fscanf(fp, "%d", &caseNum);
	for (int i = 0; i < caseNum; i++) {//caseNum번 시행
		int caseSize = 0, count = 0;
		//픽셀의 크기
		fscanf(fp, "%d", &caseSize);//caseSize^caseSize 배열을 사용하게 됨
		//printf("caseSize: %d\n", caseSize);
		//배열에 원소들 저장
		for (int j = 0; j < caseSize; j++) {
			for (int k = 0; k < caseSize; k++) {
				fscanf(fp, "%d", &arr[j][k]);
				//printf("%d ", arr[j][k]);
			}
			//printf("\n");
		}
		//DFS 탐색
		Queue q = create();
		Position cur;//현재 위치를 나타낼 Postition 구조체
		cur.x = 0;
		cur.y = 0;
		//2차원 배열 하나하나 돌면서 검사, 이미 돌았던 원소면 다시 안돔
		for (int j = 0; j < caseSize; j++) {
			for (int k = 0; k < caseSize; k++) {
				//배열의 각 픽셀에 대해 탐색했었는지 확인 후 탐색 한적 없다면 DFS 시작
				//탐색할 수 있는 픽셀이 아닌 경우(방문했었거나, 벽, 외부인 경우) => 그다음 픽셀로 넘어감
				if (arr[j][k] != 1) continue;
				else {
					cur.x = j; cur.y = k;
					count = 1;
					enqueue(q, cur, -1);
					arr[cur.x][cur.y] = VISITED;
				}
				//탐색할 수 있는 경우=> 해당 노드로 이동 후, cur변경
				//printf("arr[%d][%d] == 1\n", j, k);
				while (1) {
					Link link = dequeue(q);//dequeue 된 노드 반환
					cur.x = link->x; cur.y = link->y;
					bool forwarded = false;
					for (int dir = 0; dir < 8; dir++) {
						//이동가능 한 경로를 모두 삽입한다. 현재 위치와 dir, caseNum을 인자로 넘김
						//printf("dir: %d\n", dir);
						if (movable(cur, dir, caseSize)) {
							//printf("이동할 수 있는 경로 존재, 해당 위치 큐에 삽입: %d %d\n", cur.x, cur.y);
							enqueue(q, cur, dir); count++;
							forwarded = true;
						}
					}
					if (is_empty(q)) {
						printf("%d ", count); break;
					}
				}
			}
		}
		printf("\n");
	}
	return 0;
}

bool movable(Position cur, int dir, int caseSize) {
	//dir 0이면 북, 1이면 동북 , 2면 동, 3이면 동남, 4면 남, 5면 남서, 6이면 서, 7이면 북서
	//북
	if (dir == 0) {
		if (arr[cur.x - 1][cur.y] == 1) {
			arr[cur.x - 1][cur.y] = VISITED;
			return true;
		}
		else return false;
	}
	//동북
	else if (dir == 1) {
		if (arr[cur.x - 1][cur.y + 1] == 1) {
			arr[cur.x - 1][cur.y + 1] = VISITED;
			return true;
		}
		else return false;
	}
	//동
	else if (dir == 2) {
		if (arr[cur.x][cur.y + 1] == 1) {
			arr[cur.x][cur.y + 1] = VISITED;
			return true;
		}
		else return false;

	}
	// 동남
	else if (dir == 3) {
		if (arr[cur.x + 1][cur.y + 1] == 1) {
			arr[cur.x + 1][cur.y + 1] = VISITED;
			return true;
		}
		else return false;
	}
	//남
	else if (dir == 4) {
		if (arr[cur.x + 1][cur.y] == 1) {
			arr[cur.x + 1][cur.y] = VISITED;
			return true;
		}
		else return false;
	}
	//남서
	else if (dir == 5) {
		if (arr[cur.x + 1][cur.y - 1] == 1) {
			arr[cur.x + 1][cur.y - 1] = VISITED;
			return true;
		}
		else return false;
	}
	//서
	else if (dir == 6) {
		if (arr[cur.x][cur.y - 1] == 1) {
			arr[cur.x][cur.y - 1] = VISITED;
			return true;
		}
		else return false;
	}
	//북서
	else if (dir == 7) {
		if (arr[cur.x - 1][cur.y - 1] == 1) {
			arr[cur.x - 1][cur.y - 1] = VISITED;
			return true;
		}
		else return false;
	}
}

stack.cpp***********************
#include "stack.h"
#include <stdlib.h>
#include <stdio.h>
#define INIT_CAPACITY 3000

int offset[8][2] = { {-1,0},{-1, 1}, {0,1},{1,1},{1,0},{1,-1},{0,-1},{-1,-1} };

//현재 위치(cur)를 받아서 이동한 위치를 반환
Position move_to(Position pos, int dir) {
	Position next;
	next.x = pos.x + offset[dir][0];
	next.y = pos.y + offset[dir][1];
	//printf("위치 이동: (%d, %d)\n", next.x, next.y);
	return next;
}

Queue create() {
	Queue q = (Queue)malloc(sizeof(struct queue_type));
	q->front = NULL;
	q->rear = NULL;
	q->size = NULL;
	return q;
}

void enqueue(Queue q, Position cur, int dir) {
	//한번에 여러개의 노드 저장해야 하므로 dir로 구분지어줘야 한다.
	Link newNode = (Link)malloc(sizeof(Node));
	if (dir == -1) {newNode->x = cur.x; newNode->y = cur.y; }//그냥 삽입
	else if (dir == 0) { newNode->x = cur.x - 1; newNode->y = cur.y; }//북
	else if (dir == 1) { newNode->x = cur.x - 1; newNode->y = cur.y + 1; }//동북
	else if (dir == 2) { newNode->x = cur.x; newNode->y = cur.y + 1; }//동
	else if (dir == 3) { newNode->x = cur.x + 1; newNode->y = cur.y + 1; }//남동
	else if (dir == 4) { newNode->x = cur.x + 1; newNode->y = cur.y; }//남
	else if (dir == 5) { newNode->x = cur.x + 1; newNode->y = cur.y - 1; }//남서
	else if (dir == 6) { newNode->x = cur.x; newNode->y = cur.y - 1; }//서
	else if (dir == 7) { newNode->x = cur.x - 1; newNode->y = cur.y - 1; }//북서

	newNode->next = NULL;

	if (q->front == NULL) {
		q->front = newNode;
		q->rear = newNode;
	}
	else {
		q->rear->next = newNode;
		q->rear = newNode;
	}
	//printf("노드 enqueue: (%d, %d)\n", newNode->x, newNode->y);
}

Link dequeue(Queue q) {
	Link oldNode = q->front;
	q->front = oldNode->next;
	//printf("노드 dequeue: (%d, %d)\n", oldNode->x, oldNode->y);
	return oldNode;
}
bool is_empty(Queue q) {
	if (q->front == NULL) return true;
	return false;
}

stack.h*************************
#include <stdbool.h> 

typedef int Item;

typedef struct pos {
	int x, y;
} Position;

typedef struct node {
	int x, y;
	struct node* next;
} Node;
typedef Node* Link;

//구조체 변수로 배열 포인터르 가지는 구조체 선언(이걸 가리키는게 Stack 임)
struct queue_type {
	Node * front; //연결리스트, Position 형 포인터
	Node* rear;
	int size;
};

typedef struct queue_type* Queue;
Queue create();
void enqueue(Queue q, Position cur, int dir);
Link dequeue(Queue q);
bool is_empty(Queue q);
Position move_to(Position pos, int dir);

